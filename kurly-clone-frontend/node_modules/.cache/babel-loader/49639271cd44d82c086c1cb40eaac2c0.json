{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport ValidationCheck from '../../pages/signUp/ValidationCheck';\nexport const DuplicationCheck = () => {\n  _s();\n\n  const [idIsOk, setIdIsOk] = useState(false);\n  const [emailIsOk, setEmailIsOk] = useState(false);\n  const {\n    memberId,\n    memberIdErr\n  } = ValidationCheck();\n\n  const idCheck = async e => {\n    e.preventDefault();\n\n    if (memberIdErr) {\n      try {\n        await axios.post('http://localhost:5000/api/duplicationcheck', {\n          memberId\n        }).then(res => {\n          console.log(res.data);\n          const message = res.data.message;\n          const status = res.data.status;\n          window.alert(message);\n\n          if (status === 1) {\n            setIdIsOk(true);\n          } else if (status === 0) {\n            setIdIsOk(false);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      alert('6자 이상 16자 이하의 영문 혹은 영문과 숫자를 조합');\n    }\n  };\n\n  return {\n    idIsOk,\n    emailIsOk,\n    idCheck\n  };\n};\n\n_s(DuplicationCheck, \"V4vFnic85LF97isDBt0mLeQzNn4=\");\n\n_c = DuplicationCheck;\n\nvar _c;\n\n$RefreshReg$(_c, \"DuplicationCheck\");","map":{"version":3,"names":["useState","axios","ValidationCheck","DuplicationCheck","idIsOk","setIdIsOk","emailIsOk","setEmailIsOk","memberId","memberIdErr","idCheck","e","preventDefault","post","then","res","console","log","data","message","status","window","alert","error"],"sources":["C:/Users/JUNE/Desktop/kurly-clone/kurly-clone-frontend/src/components/signup/duplicationCheck.ts"],"sourcesContent":["import { useState } from 'react'\r\nimport axios from 'axios'\r\nimport ValidationCheck from '../../pages/signUp/ValidationCheck';\r\n\r\nexport const DuplicationCheck = () => {\r\n  const [idIsOk, setIdIsOk] = useState<boolean>(false);\r\n  const [emailIsOk, setEmailIsOk] = useState<boolean>(false);\r\n\r\n  const { memberId, memberIdErr } = ValidationCheck();\r\n\r\n  const idCheck = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    if (memberIdErr) {\r\n      try {\r\n        await axios\r\n          .post(\r\n            'http://localhost:5000/api/duplicationcheck',\r\n            {\r\n              memberId,\r\n            }\r\n          )\r\n          .then((res) => {\r\n            console.log(res.data);\r\n            const message = res.data.message;\r\n            const status = res.data.status;\r\n            window.alert(message);\r\n            if (status === 1) {\r\n              setIdIsOk(true);\r\n            } else if (status === 0) {\r\n              setIdIsOk(false);\r\n            }\r\n          })\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    } else {alert('6자 이상 16자 이하의 영문 혹은 영문과 숫자를 조합');}\r\n  }\r\n\r\n  return {\r\n    idIsOk,\r\n    emailIsOk,\r\n    idCheck,\r\n  }\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;EAAA;;EACpC,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAU,KAAV,CAApC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;EAEA,MAAM;IAAEQ,QAAF;IAAYC;EAAZ,IAA4BP,eAAe,EAAjD;;EAEA,MAAMQ,OAAO,GAAG,MAAOC,CAAP,IAAkD;IAChEA,CAAC,CAACC,cAAF;;IACA,IAAIH,WAAJ,EAAiB;MACf,IAAI;QACF,MAAMR,KAAK,CACRY,IADG,CAEF,4CAFE,EAGF;UACEL;QADF,CAHE,EAOHM,IAPG,CAOGC,GAAD,IAAS;UACbC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;UACA,MAAMC,OAAO,GAAGJ,GAAG,CAACG,IAAJ,CAASC,OAAzB;UACA,MAAMC,MAAM,GAAGL,GAAG,CAACG,IAAJ,CAASE,MAAxB;UACAC,MAAM,CAACC,KAAP,CAAaH,OAAb;;UACA,IAAIC,MAAM,KAAK,CAAf,EAAkB;YAChBf,SAAS,CAAC,IAAD,CAAT;UACD,CAFD,MAEO,IAAIe,MAAM,KAAK,CAAf,EAAkB;YACvBf,SAAS,CAAC,KAAD,CAAT;UACD;QACF,CAjBG,CAAN;MAkBD,CAnBD,CAmBE,OAAOkB,KAAP,EAAc;QACdP,OAAO,CAACC,GAAR,CAAYM,KAAZ;MACD;IACF,CAvBD,MAuBO;MAACD,KAAK,CAAC,gCAAD,CAAL;IAAyC;EAClD,CA1BD;;EA4BA,OAAO;IACLlB,MADK;IAELE,SAFK;IAGLI;EAHK,CAAP;AAKD,CAvCM;;GAAMP,gB;;KAAAA,gB"},"metadata":{},"sourceType":"module"}