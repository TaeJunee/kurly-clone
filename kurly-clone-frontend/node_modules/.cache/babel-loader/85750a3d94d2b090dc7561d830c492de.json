{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nexport default function ValidationCheck() {\n  _s();\n\n  const [memberId, setMemberId] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordChk, setPasswordChk] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [extraAddress, setExtraAddress] = useState('');\n  const [birth, setBirth] = useState({\n    year: '',\n    month: '',\n    day: ''\n  });\n  const [checked, setChecked] = useState('');\n  const [memberIdErr, setMemberIdErr] = useState(false);\n  const [passwordErr, setPasswordErr] = useState(0);\n  const [passwordChkErr, setPasswordChkErr] = useState(false);\n  const [nameErr, setNameErr] = useState(false);\n  const [emailErr, setEmailErr] = useState(false);\n  const [phoneErr, setPhoneErr] = useState(false);\n  const [memberIdErrMessage, setMemberIdErrMessage] = useState('');\n  const [passwordErrMessage, setPasswordErrMessage] = useState('');\n  const [passwordChkErrMessage, setPasswordChkErrMessage] = useState('');\n  const [nameErrMessage, setNameErrMessage] = useState('');\n  const [emailErrMessage, setEmailErrMessage] = useState('');\n  const [phoneErrMessage, setPhoneErrMessage] = useState('');\n  const [isActive, setIsActive] = useState(false); // const onSubmit = useCallback(\n  //   async (e: React.ChangeEvent<HTMLInputElement>) => {\n  //     e.preventDefault()\n  //     try {\n  //       await axios\n  //         .post (REGISTER_USERS_URL, {\n  //           memberId: memberId,\n  //           password: password,\n  //           name: name,\n  //           email: email,\n  //           phone: phone,\n  //         })\n  //         .then((res) => {\n  //           console.lge('response', res)\n  //           if (res.status === 200) {\n  //             Router.push('')\n  //           }\n  //         })\n  //     } catch (err) {\n  //       console.log(err);\n  //     }\n  //   }, [memberid, password, name, email, phone]\n  // )\n\n  const onChangeMemberId = useCallback(e => {\n    const memberIdRegEx = /^(?!(?:[0-9]+)$)([a-zA-Z]|[0-9a-zA-Z]){6,16}$/;\n    console.log(e.target.value);\n\n    if (!e.target.value || memberIdRegEx.test(e.target.value)) {\n      setMemberIdErr(false);\n    } else {\n      setMemberIdErr(true);\n      setMemberIdErrMessage('6자 이상 16자 이하의 영문 혹은 영문과 숫자를 조합');\n    }\n\n    setMemberId(e.target.value);\n  }, []);\n  const onChangePassword = useCallback(e => {\n    const passwordRegEx = /^(?!((?:[A-Za-z]+)|(?:[~!@#$%^&*()_+=]+)|(?=[0-9]+))$)[A-Za-z\\d~!@#$%^&*()_+=]{10,16}$/;\n\n    if (!e.target.value || passwordRegEx.test(e.target.value)) {\n      setPasswordErr(0);\n    } else if (e.target.value.length < 10) {\n      setPasswordErr(1);\n      setPasswordErrMessage('최소 10자 이상 입력');\n    } else {\n      setPasswordErr(2);\n      setPasswordErrMessage('영문/숫자/특수문자(공백 제외)만 허용하며, 2개 이상 조합');\n    }\n\n    setPassword(e.target.value);\n  }, []);\n  const onChangePasswordChk = useCallback(e => {\n    console.log(e.target.value);\n\n    if (!e.target.value || e.target.value === password) {\n      setPasswordChkErr(false);\n    } else {\n      setPasswordChkErr(true);\n      setPasswordChkErrMessage('동일한 비밀번호를 입력');\n    }\n\n    setPasswordChk(e.target.value);\n  }, [password]);\n\n  const onChangeName = e => {\n    if (!e.target.value) {\n      setNameErr(true);\n      setNameErrMessage('이름을 입력해주세요');\n    } else {\n      setNameErr(false);\n    }\n\n    setName(e.target.value);\n  };\n\n  const onChangeEmail = useCallback(e => {\n    const emailRegEx = /^[A-Za-z0-9]([-_.]?[A-Za-z0-9])*@[A-Za-z0-9]([-_.]?[A-Za-z0-9])*\\.[A-Za-z]{2,3}$/i;\n\n    if (!e.target.value || emailRegEx.test(e.target.value)) {\n      setEmailErr(false);\n    } else {\n      setEmailErr(true);\n      setEmailErrMessage('이메일 형식으로 입력해주세요');\n    }\n\n    setEmail(e.target.value);\n  }, []);\n  const onChangePhone = useCallback(e => {\n    const numRegEx = /[0-9]$/g;\n    const phoneRegEx = /^01([0|1|6|7|8|9])([0-9]{4})([0-9]{4})$/;\n\n    if (numRegEx.test(e.target.value)) {\n      if (phoneRegEx.test(e.target.value)) {\n        setPhoneErr(false);\n        setIsActive(true);\n      } else {\n        setPhoneErr(false);\n        setIsActive(false);\n      }\n    } else {\n      e.target.value = e.target.value.replace(/[^0-9]/g, '');\n      setPhoneErr(true);\n      setIsActive(false);\n      setPhoneErrMessage('휴대폰 번호를 입력해주세요');\n    }\n\n    setPhone(e.target.value);\n  }, []);\n\n  const onChangeExtraAddress = e => {\n    setExtraAddress(e.target.value);\n  };\n\n  const onChangeBirthYear = e => {\n    setBirth(prevState => {\n      return { ...prevState,\n        year: e.target.value\n      };\n    });\n  };\n\n  const onChangeBirthMonth = e => {\n    setBirth(prevState => {\n      return { ...prevState,\n        month: e.target.value\n      };\n    });\n  };\n\n  const onChangeBirthDay = e => {\n    setBirth(prevState => {\n      return { ...prevState,\n        day: e.target.value\n      };\n    });\n  };\n\n  const onChangeRadio = e => {\n    setChecked(e.target.value);\n  };\n\n  const CheckPhone = e => {\n    const phoneRegEx = /^01([0|1|6|7|8|9])([0-9]{3,4})([0-9]{4})$/;\n\n    if (!e.target.value || phoneRegEx.test(e.target.value)) {\n      setPhoneErr(false);\n    } else {\n      setPhoneErr(true);\n      setPhoneErrMessage('잘못된 휴대폰 번호입니다. 확인 후 다시 시도해주세요.');\n    }\n\n    setPhone(e.target.value);\n  };\n\n  return {\n    checked,\n    memberId,\n    password,\n    passwordChk,\n    name,\n    email,\n    phone,\n    extraAddress,\n    birth,\n    memberIdErr,\n    memberIdErrMessage,\n    passwordErr,\n    passwordErrMessage,\n    passwordChkErr,\n    passwordChkErrMessage,\n    nameErr,\n    emailErr,\n    emailErrMessage,\n    phoneErr,\n    phoneErrMessage,\n    nameErrMessage,\n    isActive,\n    onChangeMemberId,\n    onChangePassword,\n    onChangePasswordChk,\n    onChangeName,\n    onChangeEmail,\n    onChangePhone,\n    onChangeExtraAddress,\n    onChangeRadio,\n    onChangeBirthYear,\n    onChangeBirthMonth,\n    onChangeBirthDay\n  };\n}\n\n_s(ValidationCheck, \"uQDVK2SoYe09VuCRCi/28BOU9dw=\");\n\n_c = ValidationCheck;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationCheck\");","map":{"version":3,"names":["useCallback","useState","ValidationCheck","memberId","setMemberId","password","setPassword","passwordChk","setPasswordChk","name","setName","email","setEmail","phone","setPhone","extraAddress","setExtraAddress","birth","setBirth","year","month","day","checked","setChecked","memberIdErr","setMemberIdErr","passwordErr","setPasswordErr","passwordChkErr","setPasswordChkErr","nameErr","setNameErr","emailErr","setEmailErr","phoneErr","setPhoneErr","memberIdErrMessage","setMemberIdErrMessage","passwordErrMessage","setPasswordErrMessage","passwordChkErrMessage","setPasswordChkErrMessage","nameErrMessage","setNameErrMessage","emailErrMessage","setEmailErrMessage","phoneErrMessage","setPhoneErrMessage","isActive","setIsActive","onChangeMemberId","e","memberIdRegEx","console","log","target","value","test","onChangePassword","passwordRegEx","length","onChangePasswordChk","onChangeName","onChangeEmail","emailRegEx","onChangePhone","numRegEx","phoneRegEx","replace","onChangeExtraAddress","onChangeBirthYear","prevState","onChangeBirthMonth","onChangeBirthDay","onChangeRadio","CheckPhone"],"sources":["C:/Users/JUNE/Desktop/market-kurly-react/src/components/signup/ValidationCheck.ts"],"sourcesContent":["\r\nimport React, { useCallback, useState } from \"react\"\r\n \r\n export default function ValidationCheck() {\r\n    const [memberId, setMemberId] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [passwordChk, setPasswordChk] = useState<string>('');\r\n    const [name, setName] = useState<string>('');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [phone, setPhone] = useState<string>('');\r\n    const [extraAddress , setExtraAddress] = useState<string>('');\r\n    const [birth, setBirth] = useState({year: '', month: '', day: ''})\r\n    const [checked, setChecked] = useState<string>('');\r\n\r\n    const [memberIdErr, setMemberIdErr] = useState<boolean>(false);\r\n    const [passwordErr, setPasswordErr] = useState<number>(0);\r\n    const [passwordChkErr, setPasswordChkErr] = useState<boolean>(false);\r\n    const [nameErr, setNameErr] = useState<boolean>(false);\r\n    const [emailErr, setEmailErr] = useState<boolean>(false);\r\n    const [phoneErr, setPhoneErr] = useState<boolean>(false);\r\n\r\n    const [memberIdErrMessage, setMemberIdErrMessage] = useState<string>('');\r\n    const [passwordErrMessage, setPasswordErrMessage] = useState<string>('');\r\n    const [passwordChkErrMessage, setPasswordChkErrMessage] = useState<string>('');\r\n    const [nameErrMessage, setNameErrMessage] = useState<string>('');\r\n    const [emailErrMessage, setEmailErrMessage] = useState<string>('');\r\n    const [phoneErrMessage, setPhoneErrMessage] = useState<string>('');\r\n\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    // const onSubmit = useCallback(\r\n    //   async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     e.preventDefault()\r\n    //     try {\r\n    //       await axios\r\n    //         .post (REGISTER_USERS_URL, {\r\n    //           memberId: memberId,\r\n    //           password: password,\r\n    //           name: name,\r\n    //           email: email,\r\n    //           phone: phone,\r\n    //         })\r\n    //         .then((res) => {\r\n    //           console.lge('response', res)\r\n    //           if (res.status === 200) {\r\n    //             Router.push('')\r\n    //           }\r\n    //         })\r\n    //     } catch (err) {\r\n    //       console.log(err);\r\n    //     }\r\n    //   }, [memberid, password, name, email, phone]\r\n    // )\r\n\r\n    const onChangeMemberId = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const memberIdRegEx = /^(?!(?:[0-9]+)$)([a-zA-Z]|[0-9a-zA-Z]){6,16}$/;\r\n      console.log(e.target.value);\r\n      if (!e.target.value || memberIdRegEx.test(e.target.value)) {\r\n        setMemberIdErr(false);\r\n      } else {\r\n        setMemberIdErr(true);\r\n        setMemberIdErrMessage('6자 이상 16자 이하의 영문 혹은 영문과 숫자를 조합');\r\n      }\r\n      setMemberId(e.target.value); \r\n  }, [])\r\n\r\n    const onChangePassword = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const passwordRegEx =  /^(?!((?:[A-Za-z]+)|(?:[~!@#$%^&*()_+=]+)|(?=[0-9]+))$)[A-Za-z\\d~!@#$%^&*()_+=]{10,16}$/;\r\n      if (!e.target.value || passwordRegEx.test(e.target.value)) {\r\n        setPasswordErr(0);\r\n      } else if (e.target.value.length < 10) {\r\n        setPasswordErr(1);\r\n        setPasswordErrMessage('최소 10자 이상 입력');\r\n      } else {\r\n        setPasswordErr(2);\r\n        setPasswordErrMessage('영문/숫자/특수문자(공백 제외)만 허용하며, 2개 이상 조합');\r\n      }\r\n      setPassword(e.target.value);\r\n    }, [])\r\n\r\n    const onChangePasswordChk = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      console.log(e.target.value);\r\n      if (!e.target.value || e.target.value === password) {\r\n        \r\n        setPasswordChkErr(false);\r\n      } else {\r\n        setPasswordChkErr(true);\r\n        setPasswordChkErrMessage('동일한 비밀번호를 입력');\r\n      }\r\n      setPasswordChk(e.target.value);\r\n    }, [password])\r\n\r\n    const onChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      if (!e.target.value) {\r\n        setNameErr(true);\r\n        setNameErrMessage('이름을 입력해주세요');\r\n      } else {\r\n        setNameErr(false);\r\n      }\r\n      setName(e.target.value);\r\n    }\r\n    \r\n\r\n    const onChangeEmail = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const emailRegEx = /^[A-Za-z0-9]([-_.]?[A-Za-z0-9])*@[A-Za-z0-9]([-_.]?[A-Za-z0-9])*\\.[A-Za-z]{2,3}$/i;\r\n      if (!e.target.value || emailRegEx.test(e.target.value)) {\r\n        setEmailErr(false);\r\n      } else {\r\n        setEmailErr(true);\r\n        setEmailErrMessage('이메일 형식으로 입력해주세요');\r\n      }\r\n      setEmail(e.target.value); \r\n    }, [])\r\n\r\n    const onChangePhone = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const numRegEx = /[0-9]$/g;\r\n      const phoneRegEx = /^01([0|1|6|7|8|9])([0-9]{4})([0-9]{4})$/;\r\n\r\n      if (numRegEx.test(e.target.value)) {\r\n        if (phoneRegEx.test(e.target.value)) {\r\n          setPhoneErr(false);\r\n          setIsActive(true);\r\n        } else {\r\n          setPhoneErr(false);\r\n          setIsActive(false);\r\n        }\r\n      } else {\r\n        e.target.value = e.target.value.replace(/[^0-9]/g,'');\r\n        setPhoneErr(true);\r\n        setIsActive(false);\r\n        setPhoneErrMessage('휴대폰 번호를 입력해주세요');\r\n      }\r\n      setPhone(e.target.value);\r\n    }, [])\r\n\r\n    const onChangeExtraAddress = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setExtraAddress(e.target.value);\r\n    }\r\n\r\n    const onChangeBirthYear = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setBirth((prevState) => {\r\n        return {...prevState, year: e.target.value};\r\n      })\r\n    }\r\n\r\n    const onChangeBirthMonth = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setBirth((prevState) => {\r\n        return {...prevState, month: e.target.value};\r\n      })\r\n    }\r\n\r\n    const onChangeBirthDay = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setBirth((prevState) => {\r\n        return {...prevState, day: e.target.value};\r\n      })\r\n    }\r\n\r\n    const onChangeRadio = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setChecked(e.target.value);\r\n    }\r\n\r\n    const CheckPhone = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const phoneRegEx = /^01([0|1|6|7|8|9])([0-9]{3,4})([0-9]{4})$/;\r\n      if (!e.target.value || phoneRegEx.test(e.target.value)) {\r\n        setPhoneErr(false);\r\n      } else {\r\n        setPhoneErr(true);\r\n        setPhoneErrMessage('잘못된 휴대폰 번호입니다. 확인 후 다시 시도해주세요.');\r\n      }\r\n      setPhone(e.target.value); \r\n    }\r\n\r\n    return {\r\n      checked,\r\n      memberId,\r\n      password,\r\n      passwordChk,\r\n      name,\r\n      email,\r\n      phone,\r\n      extraAddress,\r\n      birth,\r\n      memberIdErr,\r\n      memberIdErrMessage,\r\n      passwordErr,\r\n      passwordErrMessage,\r\n      passwordChkErr,\r\n      passwordChkErrMessage,\r\n      nameErr,\r\n      emailErr,\r\n      emailErrMessage,\r\n      phoneErr,\r\n      phoneErrMessage,\r\n      nameErrMessage,\r\n      isActive,\r\n      onChangeMemberId,\r\n      onChangePassword,\r\n      onChangePasswordChk,\r\n      onChangeName,\r\n      onChangeEmail,\r\n      onChangePhone,\r\n      onChangeExtraAddress,\r\n      onChangeRadio,\r\n      onChangeBirthYear,\r\n      onChangeBirthMonth,\r\n      onChangeBirthDay,\r\n    }\r\n  }\r\n  \r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}